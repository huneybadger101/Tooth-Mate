{"version":3,"file":"sampler.js","sourceRoot":"","sources":["../../../src/features/scene-graph/sampler.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAEH,OAAO,EAA0B,OAAO,EAAC,MAAM,OAAO,CAAC;AAEvD,OAAO,EAAC,MAAM,EAAwB,IAAI,EAAW,MAAM,kDAAkD,CAAC;AAI9G,OAAO,EAAC,kBAAkB,EAAE,SAAS,EAAE,eAAe,EAAC,MAAM,wBAAwB,CAAC;AAItF,MAAM,WAAW,GAAG,CAAC,GAAG,EAAE;IACxB,MAAM,eAAe,GAAqB;QACxC,MAAM,CAAC,OAAO;QACd,MAAM,CAAC,MAAM;QACb,MAAM,CAAC,oBAAoB;QAC3B,MAAM,CAAC,kBAAkB;QACzB,MAAM,CAAC,mBAAmB;QAC1B,MAAM,CAAC,kBAAkB;KAC1B,CAAC;IACF,OAAO,CAAC,KAAc,EAAsB,EAAE,CACnC,eAAe,CAAC,OAAO,CAAC,KAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,EAAE,CAAC;AAEL,MAAM,WAAW,GAAG,CAAC,GAAG,EAAE;IACxB,MAAM,eAAe,GAAqB,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IAC1E,OAAO,CAAC,KAAc,EAAsB,EAAE,CACnC,eAAe,CAAC,OAAO,CAAC,KAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,EAAE,CAAC;AAEL,MAAM,UAAU,GAAG,CAAC,GAAG,EAAE;IACvB,MAAM,SAAS,GACX,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACzD,OAAO,CAAC,KAAc,EAAqB,EAAE,CAClC,SAAS,CAAC,OAAO,CAAC,KAAiB,CAAC,GAAG,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,EAAE,CAAC;AAEL,MAAM,mBAAmB,GACrB,CACW,QAAW,EAAE,KAAc,EAAgC,EAAE;IACtE,QAAQ,QAAQ,EAAE;QAChB,KAAK,WAAW;YACd,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;QAC5B,KAAK,WAAW;YACd,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;QAC5B,KAAK,OAAO,CAAC;QACb,KAAK,OAAO;YACV,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;QAC3B,KAAK,UAAU,CAAC;QAChB,KAAK,QAAQ,CAAC;QACd,KAAK,QAAQ;YACX,OAAO,IAAI,CAAC;QACd;YACE,MAAM,IAAI,KAAK,CAAC,8BAA8B,QAAQ,cAAc,CAAC,CAAC;KACzE;AACH,CAAC,CAAC;AAEN,MAAM,aAAa,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;AAC7C,MAAM,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAC/C,MAAM,YAAY,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;AAE3C;;GAEG;AACH,MAAM,OAAO,OAAQ,SAAQ,eAAe;IAC1C,IAAW,CAAC,aAAa,CAAC;;QACxB,OAAO,MAAA,IAAI,CAAC,kBAAkB,CAAC,0CAAE,MAAM,GAAG,IAAI,GAAG,KAAqB,CAAC;IACzE,CAAC;IAED,IAAW,CAAC,cAAc,CAAC;QACzB,OAAO,IAAI,CAAC,kBAAkB,CAAsB,CAAC;IACvD,CAAC;IAED,YAAY,QAAoB,EAAE,OAAqB;QACrD,KAAK,CAAC,QAAQ,EAAE,IAAI,GAAG,CAAe,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnE,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC;IACxC,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC;IACvC,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC;IACvC,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC;IACnC,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC;IACnC,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC;IACtC,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC;IACpC,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC;IACpC,CAAC;IAED,YAAY,CAAC,MAAiB;QAC5B,IAAI,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED,YAAY,CAAC,MAAiB;QAC5B,IAAI,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED,QAAQ,CAAC,IAAc;QACrB,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,QAAQ,CAAC,IAAc;QACrB,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,WAAW,CAAC,QAAqB;QAC/B,IAAI,QAAQ,IAAI,IAAI,EAAE;YACpB,kBAAkB;YAClB,QAAQ,GAAG,CAAC,CAAC;SACd;QACD,IAAI,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED,QAAQ,CAAC,KAAmB;QAC1B,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,eAAe;YACf,KAAK,GAAG,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC3B;QACD,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IAED,SAAS,CAAC,MAAoB;QAC5B,IAAI,MAAM,IAAI,IAAI,EAAE;YAClB,gBAAgB;YAChB,MAAM,GAAG,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC5B;QACD,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAEM,CAAC,YAAY,CAAC,CAEjB,QAAW,EAAE,KAAkD;QACjE,IAAI,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;YACxC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;gBACzC,OAAO,CAAC,QAAQ,CACR,GAAG,KAAK,CAAC;gBAClB,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;aAC5B;SACF;QACD,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;IACpB,CAAC;CACF","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Texture as ThreeTexture, Vector2} from 'three';\n\nimport {Filter, MagFilter, MinFilter, Wrap, WrapMode} from '../../three-components/gltf-instance/gltf-2.0.js';\nimport {Sampler as DefaultedSampler} from '../../three-components/gltf-instance/gltf-defaulted.js';\n\nimport {Sampler as SamplerInterface} from './api.js';\nimport {$correlatedObjects, $onUpdate, ThreeDOMElement} from './three-dom-element.js';\n\n\n\nconst isMinFilter = (() => {\n  const minFilterValues: Array<MinFilter> = [\n    Filter.Nearest,\n    Filter.Linear,\n    Filter.NearestMipmapNearest,\n    Filter.LinearMipmapLinear,\n    Filter.NearestMipmapLinear,\n    Filter.LinearMipmapLinear\n  ];\n  return (value: unknown): value is MinFilter =>\n             minFilterValues.indexOf(value as MinFilter) > -1;\n})();\n\nconst isMagFilter = (() => {\n  const magFilterValues: Array<MagFilter> = [Filter.Nearest, Filter.Linear];\n  return (value: unknown): value is MagFilter =>\n             magFilterValues.indexOf(value as MagFilter) > -1;\n})();\n\nconst isWrapMode = (() => {\n  const wrapModes: Array<WrapMode> =\n      [Wrap.ClampToEdge, Wrap.MirroredRepeat, Wrap.Repeat];\n  return (value: unknown): value is WrapMode =>\n             wrapModes.indexOf(value as WrapMode) > -1;\n})();\n\nconst isValidSamplerValue =\n    <P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'|'rotation'|'repeat'|\n     'offset'>(property: P, value: unknown): value is DefaultedSampler[P] => {\n      switch (property) {\n        case 'minFilter':\n          return isMinFilter(value);\n        case 'magFilter':\n          return isMagFilter(value);\n        case 'wrapS':\n        case 'wrapT':\n          return isWrapMode(value);\n        case 'rotation':\n        case 'repeat':\n        case 'offset':\n          return true;\n        default:\n          throw new Error(`Cannot configure property \"${property}\" on Sampler`);\n      }\n    };\n\nconst $threeTexture = Symbol('threeTexture');\nconst $threeTextures = Symbol('threeTextures');\nconst $setProperty = Symbol('setProperty');\n\n/**\n * Sampler facade implementation for Three.js textures\n */\nexport class Sampler extends ThreeDOMElement implements SamplerInterface {\n  private get[$threeTexture]() {\n    return this[$correlatedObjects]?.values().next().value as ThreeTexture;\n  }\n\n  private get[$threeTextures]() {\n    return this[$correlatedObjects] as Set<ThreeTexture>;\n  }\n\n  constructor(onUpdate: () => void, texture: ThreeTexture) {\n    super(onUpdate, new Set<ThreeTexture>(texture ? [texture] : []));\n  }\n\n  get name(): string {\n    return this[$threeTexture].name || '';\n  }\n\n  get minFilter(): MinFilter {\n    return this[$threeTexture].minFilter;\n  }\n\n  get magFilter(): MagFilter {\n    return this[$threeTexture].magFilter;\n  }\n\n  get wrapS(): WrapMode {\n    return this[$threeTexture].wrapS;\n  }\n\n  get wrapT(): WrapMode {\n    return this[$threeTexture].wrapT;\n  }\n\n  get rotation(): number {\n    return this[$threeTexture].rotation;\n  }\n\n  get scale(): Vector2 {\n    return this[$threeTexture].repeat;\n  }\n\n  get offset(): Vector2|null {\n    return this[$threeTexture].offset;\n  }\n\n  setMinFilter(filter: MinFilter) {\n    this[$setProperty]('minFilter', filter);\n  }\n\n  setMagFilter(filter: MagFilter) {\n    this[$setProperty]('magFilter', filter);\n  }\n\n  setWrapS(mode: WrapMode) {\n    this[$setProperty]('wrapS', mode);\n  }\n\n  setWrapT(mode: WrapMode) {\n    this[$setProperty]('wrapT', mode);\n  }\n\n  setRotation(rotation: number|null): void {\n    if (rotation == null) {\n      // Reset rotation.\n      rotation = 0;\n    }\n    this[$setProperty]('rotation', rotation);\n  }\n\n  setScale(scale: Vector2|null): void {\n    if (scale == null) {\n      // Reset scale.\n      scale = new Vector2(1, 1);\n    }\n    this[$setProperty]('repeat', scale);\n  }\n\n  setOffset(offset: Vector2|null): void {\n    if (offset == null) {\n      // Reset offset.\n      offset = new Vector2(0, 0);\n    }\n    this[$setProperty]('offset', offset);\n  }\n\n  private[$setProperty]<P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'|\n                        'rotation'|'repeat'|'offset'>(\n      property: P, value: MinFilter|MagFilter|WrapMode|number|Vector2) {\n    if (isValidSamplerValue(property, value)) {\n      for (const texture of this[$threeTextures]) {\n        (texture[property] as MinFilter | MagFilter | WrapMode | number |\n         Vector2) = value;\n        texture.needsUpdate = true;\n      }\n    }\n    this[$onUpdate]();\n  }\n}\n"]}